on:
  push:
    tags:
      - 'v[0-9]+.*' # push events to matching releases

name: Release

jobs:
  initial_release:
    name: Create base release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  release_assets:
    name: Release assets
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - { os: ubuntu-latest, cross: true,  toolchain: stable, target: aarch64-unknown-linux-gnu }
          - { os: ubuntu-latest, cross: true,  toolchain: stable, target: arm-unknown-linux-gnueabi }
          - { os: ubuntu-latest, cross: true,  toolchain: stable, target: armv7-unknown-linux-gnueabihf }
          - { os: ubuntu-latest, cross: true,  toolchain: stable, target: mips64el-unknown-linux-gnuabi64 }
          - { os: ubuntu-latest, cross: true,  toolchain: stable, target: powerpc64le-unknown-linux-gnu }
          - { os: ubuntu-latest, cross: true,  toolchain: stable, target: x86_64-unknown-linux-musl }
          - { os: ubuntu-latest, cross: false, toolchain: stable, target: x86_64-unknown-linux-gnu }
          # Android
          - { os: ubuntu-latest, cross: true, toolchain: stable, target: aarch64-linux-android }
          - { os: ubuntu-latest, cross: true, toolchain: stable, target: arm-linux-androideabi }
          - { os: ubuntu-latest, cross: true, toolchain: stable, target: armv7-linux-androideabi }
          - { os: ubuntu-latest, cross: true, toolchain: stable, target: i686-linux-android }
          - { os: ubuntu-latest, cross: true, toolchain: stable, target: x86_64-linux-android }
          # tumbv7neon not yet supported
          # - { os: ubuntu-latest, cross: true, toolchain: stable, target: thumbv7neon-linux-androideabi }
          # Macos
          - { os: macos-latest, cross: false, toolchain: stable, target: x86_64-apple-darwin }
          # iOS
          - { os: macos-latest, cross: false, toolchain: stable, target: aarch64-apple-ios }
          - { os: macos-latest, cross: false, toolchain: stable, target: x86_64-apple-ios }
          # Windows
          - { os: windows-latest, cross: false, toolchain: stable-x86_64-pc-windows-gnu, target: x86_64-pc-windows-gnu }
          - { os: windows-latest, cross: false, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc }

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.toolchain }}
          target: ${{ matrix.config.target }}
          override: true
          default: true

      - name: Downgrade cross
        uses: actions-rs/cargo@v1
        if: ${{ matrix.config.cross }}
        with:
          command: install
          args: --version 0.1.16 cross

      - name: Checkout code
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Build library
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.config.cross }}
          command: rustc
          args: --release --target ${{ matrix.config.target }} -p jormungandrwallet -- -C lto

      - name: prepare package
        run: mkdir -p dist/iohk_wallet/lib && mkdir -p dist/iohk_wallet/include

      - name: copy header file
        run: cp ./wallet-c/wallet.h dist/iohk_wallet/include/wallet.h

      - name: copy binary if unix
        if: matrix.config.os != 'windows-latest'
        run: find ./target/${{ matrix.config.target }}/release -maxdepth 1 '(' -name "libjormungandrwallet.so" -o -name "libjormungandrwallet.a" ')' -exec cp {} dist/iohk_wallet/lib \;
      - name: copy binary if windows
        if: matrix.config.os == 'windows-latest'
        run: cp ./target/${{ matrix.config.target }}/release/jormungandrwallet.lib ./target/${{ matrix.config.target }}/release/jormungandrwallet.dll dist/iohk_wallet/lib/
      
      - name: Get tag version
        id: get_version
        run: echo ::set-output name=VERSION::``${GITHUB_REF#refs/tags/}``
        shell: bash

      - name: Pack binaries if unix
        if: matrix.config.os != 'windows-latest'
        run: tar -C dist -czvf chain-wallet-libs-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.target }}.tar.gz iohk_wallet

      - name: Pack binaries if windows
        if: matrix.config.os == 'windows-latest'
        run: compress-archive ./dist/iohk_wallet chain-wallet-libs-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.target }}.zip

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: chain-wallet-libs-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.target }}.*
          asset_name: chain-wallet-libs-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.target }}
          tag: ${{ github.ref }}
          file_glob: true
          overwrite: true
